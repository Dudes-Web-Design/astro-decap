---
import BaseLayout from "@layouts/BaseLayout.astro";
import client from "@data/client.json";
import Landing from "@components/Landing.astro";
import UniversalForm from "@components/UniversalForm.astro";
import { Image } from "astro:assets";

// Import will provide metadata directly
import landingImageMeta from "@assets/images/drone-land.jpg";
import bulldozerImage from "@assets/images/bulldozer.jpg";

// landingImageMeta is ALREADY an image metadata object.
const imageToRender = landingImageMeta;
---

<BaseLayout
  title="Contact"
  description="Contact J.R. Outdoor Solutions for a free quote"
  preloadedImage = {imageToRender}
>
  <!-- ============================================ -->
  <!--                    LANDING                   -->
  <!-- ============================================ -->

  <Landing 
    title="Contact"
    image={imageToRender}
  />

  <!-- ============================================ -->
  <!--              Contact Section                 -->
  <!-- ============================================ -->

  <section id="cs-contact">
    <div class="cs-container">
      <div class="cs-form-wrapper">
        <div class="cs-content">
          <span class="cs-topper">Contact</span>
          <h2 class="cs-title">Get A Free Quote</h2>
          <p class="cs-text">
            For an estimate or questions, please call or fill out the form below. We will get back to you quickly.
          </p>
        </div>
        
        <form id="cs-form" name="Contact Form" method="post" novalidate role="form">
          <fieldset>
            <legend class="sr-only">Contact Information</legend>
            <div class="cs-form-group">
              <label for="name">
                <span class="cs-label-text">Name <span class="cs-required">*</span></span>
                <input
                  required
                  type="text"
                  id="name"
                  name="name"
                  placeholder="Enter your name"
                  aria-required="true"
                  autocomplete="name"
                />
                <span class="cs-error" aria-live="polite"></span>
              </label>
              
              <label for="email">
                <span class="cs-label-text">Email <span class="cs-required">*</span></span>
                <input
                  required
                  type="email"
                  id="email"
                  name="email"
                  placeholder="Enter your email"
                  aria-required="true"
                  autocomplete="email"
                />
                <span class="cs-error" aria-live="polite"></span>
              </label>
            </div>
            
            <label for="phone">
              <span class="cs-label-text">Phone <span class="cs-required">*</span></span>
              <input
                required
                type="tel"
                id="phone"
                name="phone"
                placeholder="Enter your phone number"
                aria-required="true"
                autocomplete="tel"
              />
              <span class="cs-error" aria-live="polite"></span>
            </label>
          </fieldset>
          
          <fieldset>
            <legend class="sr-only">Project Details</legend>
            <label class="cs-label-message" for="message">
              <span class="cs-label-text">Message <span class="cs-required">*</span></span>
              <textarea
                required
                name="message"
                id="message"
                placeholder="Tell us about your project..."
                rows="5"
                aria-required="true"
              ></textarea>
              <span class="cs-error" aria-live="polite"></span>
            </label>
          </fieldset>
          
          <button class="cs-button-solid" type="submit">
            <span>Submit</span>
            <svg class="cs-loading" aria-hidden="true" viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none" stroke-dasharray="32" stroke-dashoffset="32">
                <animate attributeName="stroke-dasharray" dur="2s" values="0 32;16 16;0 32;0 32" repeatCount="indefinite"/>
                <animate attributeName="stroke-dashoffset" dur="2s" values="0;-16;-32;-32" repeatCount="indefinite"/>
              </circle>
            </svg>
          </button>
          
          <div class="cs-status" role="status" aria-live="polite" aria-atomic="true"></div>
        </form>
      </div>
      
      <div class="cs-right-section">
        <!--Email-->
        <span class="cs-header">Email</span>
        <a class="cs-link" href={`mailto:${client.email}`}>{client.email}</a>
        <!--Phone-->
        <span class="cs-header">Phone</span>
        <a class="cs-link" href={`tel:${client.phoneForTel}`}
          >{client.phoneFormatted}</a
        >
        <!--Address-->
        <span class="cs-header">Headquarters</span>
        <a class="cs-link" href={client.address.mapLink}>
          <span class="cs-block">
            {client.address.city}
            {client.address.state}
            {client.address.zip}
          </span>
        </a>

        <!-- Background Image-->
        <div class="cs-bg-picture">
          <Image
            src={bulldozerImage}
            alt="building"
            loading="lazy"
            quality={90}
            format="webp"
            widths={[600, 900, 1200, 1600, 2000]}
            sizes="(max-width: 600px) 100vw, (max-width: 1024px) 50vw, 542px"
            aria-hidden="true"
            class="cs-bg-img"
          />
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<style lang="less">
@import "@styles/variables.less";
@import "@styles/mixins.less";

/* Contact Section with Side-by-Side Layout */
#cs-contact {
  .section-padding();
  background-color: @form-bg-light;
  font-family: @font-family-base;
  
  body.dark-mode & {
    background-color: @dark-bg;
  }

  .cs-container {
    .container();
    width: 100%;
    max-width: 50rem;
    margin: auto;
    
    @media only screen and (min-width: 64em) {
      max-width: 80rem;
      display: flex;
      justify-content: flex-end;
      align-items: flex-start;
      gap: @spacing-xxl * 2; // 96px gap
    }
  }

  .cs-form-wrapper {
    width: 100%;
    
    @media only screen and (min-width: 64em) {
      max-width: (630/16rem);
      flex: none;
    }
  }

  .cs-content {
    width: 100%;
    margin-bottom: @spacing-xl;
  }

  .cs-topper {
    .cs-topper-style();
    text-align: left;
    margin-bottom: @spacing-sm;
    color: var(--primary);
    
    body.dark-mode & {
      color: var(--primaryLight);
    }
  }

  .cs-title {
    .cs-title-style();
    text-align: left;
    max-width: 50rem;
    margin-bottom: @spacing-md;
    color: var(--headerColor);
    
    body.dark-mode & {
      color: @dark-text-primary;
    }
  }

  .cs-text {
    .cs-text-style();
    text-align: left;
    max-width: clamp(25.25rem, 30vw, 32.625rem);
    margin: 0;
    color: var(--bodyTextColor);
    
    body.dark-mode & {
      color: @dark-text-secondary;
    }
  }

  #cs-form {
    .sr-only {
      .sr-only();
    }
    
    fieldset {
      border: none;
      margin: 0;
      padding: 0;
      margin-bottom: @spacing-md;
    }
    
    .cs-form-group {
      display: grid;
      grid-template-columns: 1fr;
      gap: @spacing-md;
      margin-bottom: @spacing-md;
      
      @media only screen and (min-width: 48em) {
        grid-template-columns: 1fr 1fr;
      }
    }
    
    label {
      .form-label();
      margin-bottom: @spacing-md;
      display: flex;
      flex-direction: column;
      color: var(--headerColor);
      
      body.dark-mode & {
        color: @dark-text-primary;
      }
    }

    .cs-label-text {
      margin-bottom: @spacing-xs;
      font-weight: @font-weight-bold;
    }

    .cs-required {
      color: @error-color;
    }

    .cs-label-message {
      margin-bottom: @spacing-md;
    }

    input,
    textarea {
      .form-input();
      width: 100%;
      height: 3rem;
      padding: 0 @spacing-md;
      border: 1px solid @form-border-light;
      border-radius: @border-radius-md;
      background-color: var(--bodyTextColorWhite);
      color: var(--headerColor);
      .smooth-transition(border-color);
      
      &:hover {
        border-color: var(--primary);
      }
      
      &:focus {
        outline: 2px solid var(--primary);
        outline-offset: 2px;
        border-color: var(--primary);
      }
      
      &.error {
        border-color: @error-color;
      }
      
      body.dark-mode & {
        background-color: @dark-medium;
        border-color: @dark-text-secondary;
        color: @dark-text-primary;
        
        &::placeholder {
          color: @dark-text-secondary;
        }
      }
    }

    textarea {
      height: 5rem;
      padding: @spacing-md;
      resize: vertical;
      font-family: inherit;
    }

    .cs-error {
      margin-top: @spacing-xs;
      font-size: @font-size-sm;
      color: @error-color;
      opacity: 0;
      .smooth-transition(opacity);
      
      &.show {
        opacity: 1;
      }
    }

    .cs-button-solid {
      .button-primary();
      width: 100%;
      position: relative;
      
      .cs-loading {
        display: none;
        width: 1.25rem;
        height: 1.25rem;
        margin-left: @spacing-xs;
      }
      
      &.loading {
        .cs-loading {
          display: inline-block;
        }
        
        span {
          opacity: 0.7;
        }
      }
    }
    
    .cs-status {
      margin-top: @spacing-md;
      padding: @spacing-md;
      border-radius: @border-radius-md;
      font-size: @font-size-sm;
      opacity: 0;
      .smooth-transition(opacity);
      
      &.show {
        opacity: 1;
      }
      
      &.success {
        background-color: @form-success-bg-light;
        border: 1px solid @form-success-border-light;
        color: @success-color;
        
        body.dark-mode & {
          background-color: @form-success-bg-dark;
          border-color: @form-success-border-dark;
        }
      }
      
      &.error {
        background-color: @form-error-bg-light;
        border: 1px solid @form-error-border;
        color: @form-error-light;
        
        body.dark-mode & {
          background-color: @form-error-bg-dark;
          color: @form-error-dark;
        }
      }
    }
  }

  .cs-right-section {
    width: 100%;
    height: (320/16rem);
    padding: clamp(1.5rem, 3vw, 2.5rem) clamp(1.25rem, 3vw, 2.5rem);
    margin-top: @spacing-xl;
    border-radius: @border-radius-md;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    align-items: flex-start;
    position: relative;
    overflow: hidden;
    z-index: 1;
    
    @media only screen and (min-width: 64em) {
      width: 40%;
      max-width: (542/16rem);
      height: (686/16rem);
      margin-top: 0;
      flex: none;
      
      &:hover {
        .cs-bg-picture {
          transform: scale(1.1);
        }
      }
    }
    
    @media only screen and (min-width: 81.25em) {
      height: (578/16rem);
    }
  }

  .cs-header {
    font-size: clamp(1rem, 3vw, 1.25rem);
    font-weight: @font-weight-bold;
    line-height: @line-height-tight;
    margin-bottom: @spacing-xs;
    color: var(--bodyTextColorWhite);
    display: block;
  }

  .cs-link {
    font-size: clamp(1rem, 3vw, 1.25rem);
    line-height: @line-height-tight;
    text-decoration: none;
    margin-bottom: @spacing-lg;
    color: var(--bodyTextColorWhite);
    display: block;
    position: relative;

    &:before {
      content: "";
      width: 0%;
      height: 2px;
      background: currentColor;
      opacity: 1;
      display: block;
      position: absolute;
      bottom: -2px;
      left: 0;
      .smooth-transition(width);
    }

    &:hover {
      &:before {
        width: 100%;
      }
    }

    &:last-of-type {
      margin-bottom: 0;
    }
  }

  .cs-block {
    display: block;
    
    @media only screen and (min-width: 64em) {
      display: inline-block;
    }
  }

  .cs-bg-picture {
    width: 100%;
    height: 100%;
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    .smooth-transition(transform);
    background-color: #f0f0f0;

    &:before {
      content: "";
      width: 100%;
      height: 100%;
      background: linear-gradient(
        180deg,
        rgba(0, 0, 0, 0) 0%,
        rgba(0, 0, 0, 0.8) 100%
      );
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;
    }

    .cs-bg-img,
    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 0;
    }
  }
}
</style>

<script>
// Enhanced contact form validation and submission
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('cs-form');
  if (!form) return;
  
  const inputs = form.querySelectorAll('input[required], textarea[required]');
  const submitButton = form.querySelector('.cs-button-solid');
  const statusDiv = form.querySelector('.cs-status');
  
  // Enhanced validation with proper error handling
  inputs.forEach(input => {
    input.addEventListener('blur', function() {
      validateField(this);
    });
    
    input.addEventListener('focus', function() {
      clearFieldError(this);
    });
    
    input.addEventListener('input', function() {
      if (this.classList.contains('error')) {
        this.classList.remove('error');
        clearFieldError(this);
      }
    });
  });
  
  // Form submission with validation
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    
    let isValid = true;
    
    inputs.forEach(input => {
      if (!validateField(input)) {
        isValid = false;
      }
    });
    
    if (isValid) {
      submitForm(form);
    } else {
      const firstError = form.querySelector('.error');
      if (firstError) {
        firstError.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center'
        });
        (firstError as HTMLElement).focus();
      }
    }
  });
  
  function validateField(field) {
    const errorSpan = field.parentNode.querySelector('.cs-error');
    let isValid = true;
    let errorMessage = '';
    
    // Check if field is empty (for required fields)
    if (field.hasAttribute('required') && !field.value.trim()) {
      isValid = false;
      errorMessage = `${getFieldLabel(field)} is required.`;
    }
    // Email validation
    else if (field.type === 'email' && field.value.trim()) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(field.value.trim())) {
        isValid = false;
        errorMessage = 'Please enter a valid email address.';
      }
    }
    // Phone validation
    else if (field.type === 'tel' && field.value.trim()) {
      const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/;
      const cleanPhone = field.value.replace(/\D/g, '');
      if (cleanPhone.length < 10 || !phoneRegex.test(cleanPhone)) {
        isValid = false;
        errorMessage = 'Please enter a valid phone number (at least 10 digits).';
      }
    }
    
    if (!isValid) {
      field.classList.add('error');
      if (errorSpan) {
        errorSpan.textContent = errorMessage;
        errorSpan.classList.add('show');
      }
    } else {
      field.classList.remove('error');
      if (errorSpan) {
        errorSpan.classList.remove('show');
        errorSpan.textContent = '';
      }
    }
    
    return isValid;
  }
  
  function clearFieldError(field) {
    const errorSpan = field.parentNode.querySelector('.cs-error');
    field.classList.remove('error');
    if (errorSpan) {
      errorSpan.classList.remove('show');
      errorSpan.textContent = '';
    }
  }
  
  function getFieldLabel(field) {
    const label = field.parentNode.querySelector('.cs-label-text');
    if (label) {
      return label.textContent.replace('*', '').trim();
    }
    return 'This field';
  }
  
  function submitForm(form) {
    const submitButton = form.querySelector('.cs-button-solid');
    const statusDiv = form.querySelector('.cs-status');
    const buttonText = submitButton.querySelector('span');
    const loading = submitButton.querySelector('.cs-loading');
    
    // Show loading state
    submitButton.classList.add('loading');
    submitButton.disabled = true;
    if (loading) loading.style.display = 'inline-block';
    if (buttonText) buttonText.textContent = 'Sending...';
    
    // Hide previous status
    statusDiv.className = 'cs-status';
    statusDiv.textContent = '';
    
    // Simulate form submission (replace with actual submission logic)
    setTimeout(() => {
      // Reset button state
      submitButton.classList.remove('loading');
      submitButton.disabled = false;
      if (loading) loading.style.display = 'none';
      if (buttonText) buttonText.textContent = 'Submit Message';
      
      // Show success message
      statusDiv.className = 'cs-status success show';
      statusDiv.textContent = 'Thank you! Your message has been sent successfully. We\'ll get back to you within 24 hours.';
      
      // Reset form
      form.reset();
      
      // Clear any remaining error states
      form.querySelectorAll('.error').forEach(el => el.classList.remove('error'));
      form.querySelectorAll('.cs-error.show').forEach(el => {
        el.classList.remove('show');
        el.textContent = '';
      });
      
    }, 2000);
  }
});
</script>

