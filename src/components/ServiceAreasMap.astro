---
export interface Props {
  serviceAreas: Array<{
    title: string;
    slug: string;
    lat?: number;
    lng?: number;
  }>;
  class?: string;
}

const { serviceAreas, class: className = "" } = Astro.props;

// Filter service areas that have coordinates
const serviceAreasWithCoords = serviceAreas.filter(area => area.lat && area.lng);
---

<div class={`cs-map-container ${className}`} id="service-areas-map" role="application" aria-label="Interactive map of service areas in North Alabama and Middle Tennessee">
  <div id="map" class="cs-map" aria-describedby="map-description"></div>
  <div id="map-description" class="sr-only">
    Interactive map showing our service coverage across North Alabama and Middle Tennessee. 
    The map displays markers for each city we serve. Click on any marker to view details about that service area.
    If you have difficulty using the map, please refer to the service areas list below.
  </div>
</div>

<script>
  import L from 'leaflet';
  import 'leaflet.markercluster';
  import 'leaflet/dist/leaflet.css';
  import 'leaflet.markercluster/dist/MarkerCluster.css';
  import 'leaflet.markercluster/dist/MarkerCluster.Default.css';

  // Fix for default markers in Leaflet with bundlers
  delete (L.Icon.Default.prototype as any)._getIconUrl;
  L.Icon.Default.mergeOptions({
    iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
    iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
  });

  let map: L.Map | null = null;
  let markers: any = null; // Using any to avoid TypeScript issues with MarkerClusterGroup
  let mapContainer: HTMLElement | null = null;
  let dataElement: HTMLElement | null = null;
  let isInitialized = false;

  function setContainerHeight() {
    const container = document.getElementById('service-areas-map');
    if (!container) return;
    
    const isDesktop = window.innerWidth >= 768;
    const height = isDesktop ? '500px' : '350px';
    
    // Set height directly via JavaScript to ensure it takes effect
    container.style.height = height;
    container.style.setProperty('--map-height-mobile', '350px');
    container.style.setProperty('--map-height-desktop', '500px');
  }

  function initializeMap() {
    mapContainer = document.getElementById('map');
    dataElement = document.getElementById('service-areas-data');
    
    if (!mapContainer || !dataElement) {
      console.warn('Map container or data element not found');
      return false;
    }

    // Detect Safari
    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    
    // Set proper container height
    setContainerHeight();

    // Clean up existing map if it exists
    if (map) {
      try {
        map.remove();
      } catch (e) {
        console.warn('Error removing existing map:', e);
      }
      map = null;
      markers = null;
    }

    // Clear the container
    mapContainer.innerHTML = '';

    try {
      // Get service areas data from the component
      const serviceAreasData = JSON.parse(dataElement.textContent || '[]');

      // Initialize map
      map = L.map('map', {
        zoomControl: true,
        scrollWheelZoom: true,
        doubleClickZoom: true,
        touchZoom: true,
        dragging: true,
        keyboard: true,
        keyboardPanDelta: 80,
        boxZoom: true,
        attributionControl: false,
        zoomSnap: 0.5,
        zoomDelta: 0.5,
        wheelPxPerZoomLevel: 120,
      });

      // Add tile layer with unified mobile optimizations
      const tileLayerOptions = {
        attribution: '',
        subdomains: 'abcd',
        maxZoom: 20,
        minZoom: 6,
        tileSize: 256,
        zoomOffset: 0,
        detectRetina: !isSafari, // Disable retina detection on Safari
        updateWhenZooming: false,
        updateWhenIdle: true,
        keepBuffer: isSafari ? 4 : 2, // Higher buffer for Safari
        crossOrigin: true,
        className: 'unified-mobile-tiles' // Use unified class for all mobile browsers
      };

      L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', tileLayerOptions).addTo(map);

      // Custom marker icon that matches our brand
      const customIcon = L.divIcon({
        html: `
          <div class="custom-marker">
            <svg width="24" height="32" viewBox="0 0 24 32" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 2C7.58172 2 4 5.58172 4 10C4 16 12 30 12 30C12 30 20 16 20 10C20 5.58172 16.4183 2 12 2Z" fill="#dc2626" stroke="#ffffff" stroke-width="2"/>
              <circle cx="12" cy="10" r="3" fill="#ffffff"/>
            </svg>
          </div>
        `,
        className: 'custom-marker-icon',
        iconSize: [24, 32],
        iconAnchor: [12, 32],
        popupAnchor: [0, -32]
      });

      // Add individual markers for each service area (no clustering)
      const bounds = L.latLngBounds([]);
      
      serviceAreasData.forEach((area: any) => {
        if (area.lat && area.lng && map) {
          const marker = L.marker([area.lat, area.lng], { icon: customIcon });
          
          // Add click event to scroll to corresponding list item
          marker.on('click', () => {
            // Look for the corresponding element in the list
            // Try multiple selectors to find the matching element
            const selectors = [
              `#service-area-${area.slug}`,
              `[data-slug="${area.slug}"]`,
              `[data-service-area="${area.slug}"]`,
              `[id*="${area.slug}"]`
            ];
            
            let targetElement: HTMLElement | null = null;
            
            for (const selector of selectors) {
              targetElement = document.querySelector(selector);
              if (targetElement) break;
            }
            
            // If not found by slug, try to find by title
            if (!targetElement) {
              const allItems = document.querySelectorAll('[data-service-area], .service-area-item, .cs-item');
              for (const item of allItems) {
                const itemText = item.textContent?.toLowerCase() || '';
                const areaTitle = area.title.toLowerCase();
                if (itemText.includes(areaTitle)) {
                  targetElement = item as HTMLElement;
                  break;
                }
              }
            }
            
            if (targetElement) {
              // Smooth scroll to the element
              targetElement.scrollIntoView({
                behavior: 'smooth',
                block: 'center',
                inline: 'nearest'
              });
              
              // Add a temporary highlight effect
              targetElement.style.transition = 'background-color 0.3s ease';
              const originalBg = getComputedStyle(targetElement).backgroundColor;
              targetElement.style.backgroundColor = 'rgba(220, 38, 38, 0.1)';
              
              setTimeout(() => {
                targetElement!.style.backgroundColor = originalBg;
                setTimeout(() => {
                  targetElement!.style.transition = '';
                }, 300);
              }, 1000);
              
              // Announce to screen readers
              const announcement = document.createElement('div');
              announcement.setAttribute('aria-live', 'polite');
              announcement.setAttribute('aria-atomic', 'true');
              announcement.className = 'sr-only';
              announcement.textContent = `Scrolled to ${area.title} in the service areas list`;
              document.body.appendChild(announcement);
              
              setTimeout(() => {
                document.body.removeChild(announcement);
              }, 1000);
            }
          });
          
          marker.addTo(map);
          bounds.extend([area.lat, area.lng]);
        }
      });

      // Fit map to bounds with padding
      if (bounds.isValid() && map) {
        map.fitBounds(bounds, { 
          padding: [20, 20],
          maxZoom: 10 
        });
      } else if (map) {
        // Fallback center (roughly between Alabama and Tennessee)
        map.setView([35.0, -86.8], 8);
      }

      // Force map refresh after initial load to prevent tile rendering issues
      setTimeout(() => {
        if (map) {
          map.invalidateSize(true);
          // Unified mobile refresh with GPU layer optimization
          if (window.innerWidth < 768) {
            const container = map.getContainer();
            // Force both map container and tiles onto GPU layer
            container.style.transform = 'translateZ(0)';
            container.style.backfaceVisibility = 'hidden';
            
            // Single debounced refresh to avoid race conditions
            setTimeout(() => {
              if (map) {
                map.invalidateSize(true);
              }
            }, 200);
          }
        }
      }, 500);

      // Debounced resize handler to prevent excessive invalidateSize calls
      let resizeTimeout: any = null;
      function handleResize() {
        // Clear previous timeout to debounce rapid resize events
        if (resizeTimeout) {
          clearTimeout(resizeTimeout);
        }
        
        // Set container height immediately for visual feedback
        setContainerHeight();
        
        // Debounce the expensive operations
        resizeTimeout = setTimeout(() => {
          if (map) {
            const container = map.getContainer();
            const isMobile = window.innerWidth < 768;
            
            // Apply GPU layer optimizations based on screen size
            if (isMobile) {
              container.style.transform = 'translateZ(0)';
              container.style.backfaceVisibility = 'hidden';
              container.style.willChange = 'transform';
            } else {
              // Remove mobile optimizations on desktop
              container.style.transform = '';
              container.style.backfaceVisibility = '';
              container.style.willChange = 'auto';
            }
            
            // Force map to recalculate dimensions
            map.invalidateSize(true);
            
            // Additional mobile-specific refresh for iOS
            if (isMobile && /iPad|iPhone|iPod/.test(navigator.userAgent)) {
              setTimeout(() => {
                if (map) {
                  map.invalidateSize(true);
                }
              }, 150);
            }
          }
          resizeTimeout = null;
        }, 150); // 150ms debounce delay
      }

      window.addEventListener('resize', handleResize);
      
      // Handle orientation changes on mobile devices
      window.addEventListener('orientationchange', () => {
        // Delay to allow orientation change to complete
        setTimeout(() => {
          setContainerHeight();
          if (map) {
            map.invalidateSize(true);
            // Additional refresh for iOS after orientation change
            if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
              setTimeout(() => {
                if (map) {
                  map.invalidateSize(true);
                }
              }, 200);
            }
          }
        }, 300);
      });
      
      // Handle scroll events to maintain map synchronization on mobile
      let scrollTimeout: any = null;
      function handleScroll() {
        // Only handle on mobile devices
        if (window.innerWidth < 768 && map) {
          // Clear previous timeout
          if (scrollTimeout) {
            clearTimeout(scrollTimeout);
          }
          
          // Debounce scroll handling
          scrollTimeout = setTimeout(() => {
            if (map) {
              // Force a quick invalidateSize to maintain sync
              map.invalidateSize(false); // Use false for performance
            }
            scrollTimeout = null;
          }, 100);
        }
      }
      
      // Add scroll listener for mobile sync
      if (window.innerWidth < 768) {
        window.addEventListener('scroll', handleScroll, { passive: true });
      }
      
      // Store cleanup function
      (window as any).cleanupServiceAreasMap = () => {
        window.removeEventListener('resize', handleResize);
        window.removeEventListener('scroll', handleScroll);
        if (resizeTimeout) {
          clearTimeout(resizeTimeout);
        }
        if (scrollTimeout) {
          clearTimeout(scrollTimeout);
        }
        if (map) {
          try {
            map.remove();
          } catch (e) {
            console.warn('Error cleaning up map:', e);
          }
          map = null;
          markers = null;
        }
        isInitialized = false;
      };

      isInitialized = true;
      return true;

    } catch (error) {
      console.error('Error initializing map:', error);
      return false;
    }
  }

  // Check if map needs initialization
  function checkMapInitialization() {
    const container = document.getElementById('map');
    const data = document.getElementById('service-areas-data');
    
    // Always ensure correct height is set
    setContainerHeight();
    
    if (container && data && (!isInitialized || !map || container.children.length === 0)) {
      console.log('Initializing map...');
      initializeMap();
    }
  }

  // Use multiple approaches to ensure map loads
  function setupMapWatchers() {
    // Method 1: Intersection Observer to detect when map container is visible
    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting && entry.target.id === 'map') {
            setTimeout(checkMapInitialization, 100);
          }
        });
      });

      const container = document.getElementById('map');
      if (container) {
        observer.observe(container);
      }

      // Store observer for cleanup
      (window as any).mapObserver = observer;
    }

    // Method 2: MutationObserver to detect DOM changes
    if ('MutationObserver' in window) {
      const mutationObserver = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'childList') {
            const mapContainer = document.getElementById('map');
            if (mapContainer && (!isInitialized || mapContainer.children.length === 0)) {
              setTimeout(checkMapInitialization, 200);
            }
          }
        });
      });

      mutationObserver.observe(document.body, {
        childList: true,
        subtree: true
      });

      // Store observer for cleanup
      (window as any).mapMutationObserver = mutationObserver;
    }

    // Method 3: Periodic check
    const intervalId = setInterval(() => {
      checkMapInitialization();
    }, 1000);

    // Store interval for cleanup
    (window as any).mapCheckInterval = intervalId;

    // Method 4: Focus event (when user returns to tab/window)
    window.addEventListener('focus', () => {
      setTimeout(checkMapInitialization, 300);
    });
  }

  // Initialize immediately if DOM is ready
  function initialize() {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => {
          checkMapInitialization();
          setupMapWatchers();
        }, 100);
      });
    } else {
      // DOM is already loaded
      setTimeout(() => {
        checkMapInitialization();
        setupMapWatchers();
      }, 100);
    }
  }

  // Handle page visibility changes
  document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
      setTimeout(checkMapInitialization, 200);
    }
  });

  // Handle page show event (fired when page is loaded from cache)
  window.addEventListener('pageshow', (event) => {
    setTimeout(checkMapInitialization, event.persisted ? 300 : 100);
  });

  // Handle window load to ensure height is set after all CSS loads
  window.addEventListener('load', () => {
    setTimeout(() => {
      setContainerHeight();
      checkMapInitialization();
    }, 100);
  });

  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    // Clean up observers and intervals
    if ((window as any).mapObserver) {
      (window as any).mapObserver.disconnect();
    }
    if ((window as any).mapMutationObserver) {
      (window as any).mapMutationObserver.disconnect();
    }
    if ((window as any).mapCheckInterval) {
      clearInterval((window as any).mapCheckInterval);
    }
    if ((window as any).cleanupServiceAreasMap) {
      (window as any).cleanupServiceAreasMap();
    }
  });

  // Initial setup
  initialize();
</script>

<!-- Hidden data element for script access -->
<script type="application/json" id="service-areas-data" set:html={JSON.stringify(serviceAreasWithCoords)} />

<style lang="less">
@import "@styles/variables.less";
@import "@styles/mixins.less";

  .cs-map-container {
    --map-height-mobile: 350px;
    --map-height-desktop: 500px;
    
    width: 100%;
    height: var(--map-height-mobile);
    border-radius: @border-radius-md;
    overflow: hidden;
    border: 2px solid #6b7280;
    box-shadow: @shadow-sm;
    transition: box-shadow 0.3s ease;
    
    &:hover {
      box-shadow: @shadow-lg;
    }
    
    @media (min-width: 768px) {
      height: var(--map-height-desktop);
    }
    
    @media (min-width: 1024px) {
      width: 70%;
      margin: 0 auto;
      height: var(--map-height-desktop);
    }
    
    // Dark mode styles
    body.dark-mode & {
      border-color: #6b7280;
      box-shadow: @shadow-dark-sm;
      
      &:hover {
        box-shadow: @shadow-dark-lg;
      }
    }
  }

  .cs-map {
    width: 100%;
    height: 100%;
    z-index: 1;
    
    // Optimize for mobile scrolling performance
    @media (max-width: 767px) {
      will-change: transform;
      transform: translateZ(0);
      -webkit-transform: translateZ(0);
      backface-visibility: hidden;
      -webkit-backface-visibility: hidden;
      // Prevent text selection during scroll
      -webkit-user-select: none;
      user-select: none;
    }
    
    @media (min-width: 768px) {
      // Reset mobile optimizations on desktop
      will-change: auto;
      transform: none;
      -webkit-transform: none;
      backface-visibility: visible;
      -webkit-backface-visibility: visible;
    }
  }

  // Screen reader only content
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  // Custom zoom control styling
  :global(.leaflet-control-zoom) {
    border: 1px solid var(--borderColor) !important;
    border-radius: @border-radius-sm !important;
    box-shadow: @shadow-sm !important;
    
    body.dark-mode & {
      border-color: @border-color-dark !important;
      box-shadow: @shadow-dark-sm !important;
    }
  }

  :global(.leaflet-control-zoom a) {
    background-color: var(--bodyTextColorWhite) !important;
    color: var(--headerColor) !important;
    border: none !important;
    font-weight: @font-weight-bold !important;
    .smooth-transition(background-color, color);
    
    &:hover {
      background-color: var(--primary) !important;
      color: #ffffff !important;
    }
    
    body.dark-mode & {
      background-color: @dark-bg !important;
      color: @dark-text-primary !important;
      
      &:hover {
        background-color: var(--primary) !important;
        color: #ffffff !important;
      }
    }
  }

  // Remove Leaflet attribution control styles
  :global(.leaflet-control-attribution) {
    display: none !important;
  }

  // Optimize leaflet container for mobile performance
  :global(.leaflet-container) {
    @media (max-width: 767px) {
      will-change: transform;
      -webkit-tap-highlight-color: transparent;
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      user-select: none;
      // Improve touch responsiveness
      touch-action: pan-x pan-y;
    }
    
    @media (min-width: 768px) {
      will-change: auto;
      touch-action: auto;
    }
  }

  :global(.leaflet-tile) {
    @media (max-width: 767px) {
      image-rendering: optimizeSpeed;
      image-rendering: -webkit-optimize-contrast;
      image-rendering: optimize-contrast;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      transform: translateZ(0);
      -webkit-transform: translateZ(0);
    }
  }

  // Unified mobile tiles class (replaces safari-tiles)
  :global(.unified-mobile-tiles) {
    @media (max-width: 767px) {
      // Ensure tiles stay on same GPU layer as markers
      will-change: transform;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      transform: translateZ(0);
      -webkit-transform: translateZ(0);
      image-rendering: optimizeSpeed;
      image-rendering: -webkit-optimize-contrast;
      image-rendering: optimize-contrast;
    }
    
    @media (min-width: 768px) {
      // Reset GPU optimizations on desktop
      will-change: auto;
      -webkit-backface-visibility: visible;
      backface-visibility: visible;
      transform: none;
      -webkit-transform: none;
      image-rendering: auto;
    }
  }

  // Unified mobile container optimizations for all WebKit browsers
  @media (max-width: 767px) {
    .cs-map-container {
      // Force container onto GPU layer for smooth scrolling
      will-change: transform;
      -webkit-transform: translateZ(0);
      transform: translateZ(0);
      -webkit-perspective: 1000px;
      perspective: 1000px;
    }
    
    // Ensure all map elements use consistent GPU layer
    :global(.leaflet-container),
    :global(.leaflet-map-pane),
    :global(.leaflet-tile-container),
    :global(.leaflet-marker-pane) {
      will-change: transform;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      -webkit-transform: translateZ(0);
      transform: translateZ(0);
    }
  }
  
  // Reset optimizations on desktop
  @media (min-width: 768px) {
    .cs-map-container {
      will-change: auto;
      -webkit-transform: none;
      transform: none;
      -webkit-perspective: none;
      perspective: none;
    }
    
    :global(.leaflet-container),
    :global(.leaflet-map-pane),
    :global(.leaflet-tile-container),
    :global(.leaflet-marker-pane) {
      will-change: auto;
      -webkit-backface-visibility: visible;
      backface-visibility: visible;
      -webkit-transform: none;
      transform: none;
    }
  }

  // Custom marker icon styles with GPU layer optimization
  :global(.custom-marker-icon) {
    background: none !important;
    border: none !important;
    
    // Ensure markers are on same GPU layer as tiles on mobile
    @media (max-width: 767px) {
      will-change: transform;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      -webkit-transform: translateZ(0);
      transform: translateZ(0);
    }
    
    @media (min-width: 768px) {
      will-change: auto;
      -webkit-backface-visibility: visible;
      backface-visibility: visible;
      -webkit-transform: none;
      transform: none;
    }
    
    .custom-marker {
      filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
      
      // Ensure SVG also gets GPU acceleration on mobile
      @media (max-width: 767px) {
        will-change: transform;
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
        -webkit-transform: translateZ(0);
        transform: translateZ(0);
      }
      
      @media (min-width: 768px) {
        will-change: auto;
        -webkit-backface-visibility: visible;
        backface-visibility: visible;
        -webkit-transform: none;
        transform: none;
      }
      
      svg {
        display: block;
        
        path {
          fill: #dc2626;
        }
      }
    }
    
    body.dark-mode & {
      .custom-marker svg path {
        stroke: #ffffff;
        fill: #dc2626;
      }
    }
  }


</style> 