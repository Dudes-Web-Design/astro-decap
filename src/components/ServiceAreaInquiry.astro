---
interface Props {
  title?: string;
  description?: string;
  className?: string;
  id?: string;
}

const { 
  title = "Have a Question About Service in Your Area?", 
  description = "Not sure if we serve your location? Send us a quick message and we'll get back to you with information about our services in your area.",
  className = "",
  id = "service-area-inquiry"
} = Astro.props;
---

<section class={`cs-service-area-inquiry ${className}`} id={id} aria-labelledby={`${id}-heading`}>
  <div class="cs-container">
    <div class="cs-content">
      <h2 class="cs-title" id={`${id}-heading`}>{title}</h2>
      <p class="cs-text">{description}</p>
    </div>
    
    <form id="cs-inquiry-form" name="Service Area Inquiry" method="post" novalidate role="form" aria-labelledby={`${id}-heading`}>
      <fieldset>
        <legend class="sr-only">Contact Information</legend>
        <div class="cs-form-group">
          <label for={`${id}-name`}>
            <span class="cs-label-text">Name <span class="cs-required">*</span></span>
            <input
              required
              type="text"
              id={`${id}-name`}
              name="name"
              placeholder="Your name"
              aria-describedby={`${id}-name-error`}
              aria-required="true"
              autocomplete="name"
            />
            <span class="cs-error" id={`${id}-name-error`} role="alert" aria-live="polite"></span>
          </label>
          
          <label for={`${id}-email`}>
            <span class="cs-label-text">Email <span class="cs-required">*</span></span>
            <input
              required
              type="email"
              id={`${id}-email`}
              name="email"
              placeholder="Your email"
              aria-describedby={`${id}-email-error`}
              aria-required="true"
              autocomplete="email"
            />
            <span class="cs-error" id={`${id}-email-error`} role="alert" aria-live="polite"></span>
          </label>
        </div>
        
        <label for={`${id}-location`}>
          <span class="cs-label-text">Your Location <span class="cs-required">*</span></span>
          <input
            required
            type="text"
            id={`${id}-location`}
            name="location"
            placeholder="City, State (e.g., Nashville, TN)"
            aria-describedby={`${id}-location-error ${id}-location-help`}
            aria-required="true"
          />
          <span class="cs-help-text" id={`${id}-location-help`}>Help us determine if we serve your area</span>
          <span class="cs-error" id={`${id}-location-error`} role="alert" aria-live="polite"></span>
        </label>
        
        <label for={`${id}-message`}>
          <span class="cs-label-text">Message (Optional)</span>
          <textarea
            name="message"
            id={`${id}-message`}
            placeholder="Any specific questions about our services?"
            rows="3"
            aria-describedby={`${id}-message-help`}
          ></textarea>
          <span class="cs-help-text" id={`${id}-message-help`}>Tell us about your project or ask any questions</span>
        </label>
      </fieldset>
      
      <button class="cs-button-solid" type="submit" aria-describedby={`${id}-submit-status`}>
        <span>Submit</span>
        <svg class="cs-loading" aria-hidden="true" viewBox="0 0 24 24">
          <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="none" stroke-dasharray="32" stroke-dashoffset="32">
            <animate attributeName="stroke-dasharray" dur="2s" values="0 32;16 16;0 32;0 32" repeatCount="indefinite"/>
            <animate attributeName="stroke-dashoffset" dur="2s" values="0;-16;-32;-32" repeatCount="indefinite"/>
          </circle>
        </svg>
      </button>
      
      <div class="cs-status" id={`${id}-submit-status`} role="status" aria-live="polite" aria-atomic="true"></div>
    </form>
  </div>
</section>

<style lang="less">
@import "@styles/variables.less";
@import "@styles/mixins.less";

.cs-service-area-inquiry {
  .section-padding();
  background-color: var(--accent);
  position: relative;
  
  // Subtle accent border
  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--primary) 0%, var(--secondary) 100%);
    z-index: 1;
  }
  
  // Dark mode background
  body.dark-mode & {
    background-color: @dark-medium;
  }
  
  .cs-container {
    .container();
    max-width: 42rem; // 672px - slightly smaller than main contact form
  }

  .cs-content {
    text-align: center;
    margin-bottom: @spacing-lg;
    
    // Mobile: reduce spacing for compact layout
    @media only screen and (max-width: @tablet - 1px) {
      margin-bottom: @spacing-md;
    }
  }

  .cs-title {
    .cs-title-style();
    font-size: 1.75rem;
    margin-bottom: @spacing-lg;
    color: var(--headerColor);
    
    // Mobile: smaller title and spacing
    @media only screen and (max-width: @tablet - 1px) {
      font-size: 1.5rem;
      margin-bottom: @spacing-md;
    }
    
    @media only screen and (min-width: @tablet) {
      font-size: 2rem;
    }
    
    body.dark-mode & {
      color: @dark-text-primary;
    }
  }

  .cs-text {
    .cs-text-style();
    max-width: 28rem; // 448px
    margin: 0 auto;
    color: var(--bodyTextColor);
    
    body.dark-mode & {
      color: @dark-text-secondary;
    }
  }

  #cs-inquiry-form {
    // Apply consistent slice-based layout for all breakpoints
    background-color: transparent;
    border-radius: 0;
    box-shadow: none;
    padding: @spacing-lg @spacing-md;
    border: none;
    
    // Desktop: Maintain adequate padding but remove card styling
    @media only screen and (min-width: @tablet) {
      padding: @spacing-lg @spacing-lg;
    }
    
    // Dark mode: Keep transparent background for all breakpoints
    body.dark-mode & {
      background-color: transparent;
      border: none;
      box-shadow: none;
    }
    
    // Fieldset styling
    fieldset {
      border: none;
      margin: 0;
      padding: 0;
      margin-bottom: @spacing-lg;
      
      // Mobile: reduce fieldset spacing for compact layout
      @media only screen and (max-width: @tablet - 1px) {
        margin-bottom: @spacing-md;
      }
    }
    
    // Screen reader only content
    .sr-only {
      .sr-only();
    }
    
    .cs-form-group {
      display: flex;
      flex-direction: column;
      gap: @spacing-lg;
      margin-bottom: @spacing-lg;
      
      // Mobile: reduce gaps and spacing for compact layout
      @media only screen and (max-width: @tablet - 1px) {
        gap: @spacing-md;
        margin-bottom: @spacing-md;
      }
      
      // Desktop: Maintain single-column layout for consistency
      @media only screen and (min-width: @tablet) {
        gap: @spacing-lg;
        margin-bottom: @spacing-lg;
      }
    }

    label {
      .form-label();
      font-weight: @font-weight-semibold;
      line-height: @line-height-relaxed;
      margin-bottom: @spacing-lg;
      color: var(--headerColor);
      display: flex;
      flex-direction: column;
      position: relative;
      
      // Mobile: reduce label spacing for compact layout
      @media only screen and (max-width: @tablet - 1px) {
        margin-bottom: @spacing-md;
      }
      
      body.dark-mode & {
        color: @dark-text-primary;
      }
    }

    .cs-required {
      color: @error-color;
      font-weight: @font-weight-bold;
      margin-left: @spacing-xs;
      
      body.dark-mode & {
        color: @form-error-dark;
      }
    }

    input,
    textarea {
      font-size: @form-input-size;
      font-family: @font-family-base;
      font-weight: @font-weight-normal;
      width: 100%;
      height: 3rem; // 48px - compact for quick inquiry
      margin-top: @spacing-sm;
      box-sizing: border-box;
      padding: 0 @spacing-md;
      border: 2px solid @form-border-light;
      border-radius: @border-radius-md;
      background-color: var(--bodyTextColorWhite);
      color: var(--bodyTextColor);
      line-height: @line-height-normal;
      .smooth-transition(border-color);
      .smooth-transition(box-shadow);
      box-shadow: @shadow-xs;

      // Mobile: optimize for touch and prevent zoom
      @media only screen and (max-width: @tablet - 1px) {
        height: 2.75rem; // 44px - more compact for mobile
        padding: 0 @spacing-sm;
        margin-top: @spacing-xs;
        border-radius: @border-radius-sm;
        font-size: 1rem; // Ensure 16px to prevent zoom on iOS
      }

      &:hover {
        border-color: @form-border-hover;
        box-shadow: @shadow-sm;
      }

      &:focus {
        border-color: var(--primary);
        outline: none;
        box-shadow: 0 0 0 3px rgba(128, 192, 92, 0.1), @shadow-sm;
      }

      &::placeholder {
        color: @form-placeholder;
        opacity: 1;
        font-style: italic;
        font-size: @font-size-sm;
        
        // Mobile: adjust placeholder size
        @media only screen and (max-width: @tablet - 1px) {
          font-size: @font-size-md;
        }
      }

      body.dark-mode & {
        background-color: @dark-medium;
        border-color: @border-color-dark;
        color: @dark-text-primary;
        box-shadow: @shadow-dark-sm;

        &:hover {
          border-color: @border-color-dark;
          box-shadow: @shadow-dark-md;
        }

        &:focus {
          border-color: var(--primary);
          box-shadow: 0 0 0 3px rgba(128, 192, 92, 0.2), @shadow-dark-md;
        }

        &::placeholder {
          color: @form-text-muted;
        }
      }
    }

    textarea {
      min-height: 5rem; // 80px - compact for optional message
      padding: @spacing-md;
      resize: vertical;
      line-height: @line-height-relaxed;
      height: auto;
      
      // Mobile: smaller textarea
      @media only screen and (max-width: @tablet - 1px) {
        min-height: 4rem; // 64px - more compact for mobile
        padding: @spacing-sm;
      }
    }

    .cs-help-text {
      font-size: @font-size-xs;
      color: @text-muted;
      margin-top: @spacing-xs;
      font-style: italic;
      
      body.dark-mode & {
        color: @dark-text-secondary;
      }
    }

    .cs-error {
      font-size: @font-size-sm;
      color: @error-color;
      margin-top: @spacing-xs;
      font-weight: @font-weight-medium;
      display: none;
      
      &.show {
        display: block;
      }
      
      body.dark-mode & {
        color: @form-error-dark;
      }
    }

    .cs-button-solid {
      .button-primary();
      width: 100%;
      height: 3rem; // 48px - compact for quick inquiry
      border: none;
      border-radius: @border-radius-md;
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: @spacing-sm;
      font-weight: @font-weight-semibold;
      font-size: @font-size-sm;
      text-transform: none;
      margin-top: @spacing-md;
      box-shadow: 0 4px 14px rgba(128, 192, 92, 0.3);
      .smooth-transition(transform);
      .smooth-transition(box-shadow);
      
      // Mobile: optimize button for touch
      @media only screen and (max-width: @tablet - 1px) {
        height: 2.75rem; // 44px - more compact for mobile
        border-radius: @border-radius-sm;
        font-size: @font-size-xs;
        margin-top: @spacing-sm;
      }
      
      // Fix the pseudo-element from button-primary mixin to maintain border-radius
      &::before {
        border-radius: @border-radius-md;
        
        // Mobile: match mobile border radius
        @media only screen and (max-width: @tablet - 1px) {
          border-radius: @border-radius-sm;
        }
      }
      
      &:hover {
        transform: translateY(-1px);
        box-shadow: 0 6px 20px rgba(128, 192, 92, 0.4);
        border-radius: @border-radius-md;
        
        // Mobile: maintain mobile border radius on hover
        @media only screen and (max-width: @tablet - 1px) {
          border-radius: @border-radius-sm;
        }
      }
      
      &:active {
        transform: translateY(0);
      }
      
      &:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
      }
      
      body.dark-mode & {
        box-shadow: 0 4px 14px rgba(128, 192, 92, 0.2);
        
        &:hover {
          box-shadow: 0 6px 20px rgba(128, 192, 92, 0.3);
        }
      }
    }

    .cs-status {
      margin-top: @spacing-md;
      padding: @spacing-md;
      border-radius: @border-radius-md;
      font-size: @font-size-sm;
      font-weight: @font-weight-medium;
      text-align: center;
      display: none;
      
      &.show {
        display: block;
      }
      
      &.success {
        background-color: @form-success-bg-light;
        color: @success-color;
        border: 1px solid @form-success-border-light;
        
        body.dark-mode & {
          background-color: @form-success-bg-dark;
          color: @form-success-dark;
          border-color: @form-success-border-dark;
        }
      }
      
      &.error {
        background-color: @form-error-status-bg-light;
        color: @form-error-status-text-light;
        border: 1px solid @form-error-status-border-light;
        
        body.dark-mode & {
          background-color: @form-error-status-bg-dark;
          color: @form-error-status-text-dark;
          border-color: @form-error-status-border-dark;
        }
      }
    }
  }

  // Responsive adjustments
  @media only screen and (max-width: @tablet) {
    .cs-title {
      font-size: 1.5rem;
    }
    
    #cs-inquiry-form {
      padding: @spacing-lg;
    }
  }

  // Enhanced keyframe animations for better mobile UX
  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
      max-height: 0;
    }
    to {
      opacity: 1;
      transform: translateY(0);
      max-height: 80px;
    }
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(15px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  // Mobile-specific animation optimization
  @media only screen and (max-width: @tablet - 1px) {
    .cs-service-inquiry {
      // Subtle entrance animation for mobile
      animation: fadeInUp 0.5s ease-out;
    }
  }

  .cs-loading {
    display: none;
    width: 1.25rem;
    height: 1.25rem;
  }

  &.loading {
    .cs-loading {
      display: block;
    }
    
    span {
      opacity: 0.7;
    }
  }
}
</style> 

<script>
  // Enhanced mobile form validation and UX for Service Area Inquiry
  document.addEventListener('DOMContentLoaded', function() {
    const inquiryForms = document.querySelectorAll('form[id*="inquiry-form"]');
    
    inquiryForms.forEach(form => {
      const inputs = form.querySelectorAll('input[required], textarea[required]');
      const submitButton = form.querySelector('.cs-button-solid');
      const statusDiv = form.querySelector('.cs-status');
      
      // Enhanced mobile validation with touch support
      inputs.forEach(input => {
        // Real-time validation on blur for better mobile UX
        input.addEventListener('blur', function() {
          validateInquiryField(this);
        });
        
        // Clear errors on focus for mobile-friendly experience
        input.addEventListener('focus', function() {
          clearInquiryFieldError(this);
        });
        
        // Enhanced input handling for mobile
        input.addEventListener('input', function() {
          // Clear validation state on input for immediate feedback
          if (this.classList.contains('error')) {
            this.classList.remove('error');
            clearInquiryFieldError(this);
          }
        });
      });
      
      // Enhanced form submission with mobile-optimized feedback
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        let isValid = true;
        
        // Validate all required fields
        inputs.forEach(input => {
          if (!validateInquiryField(input)) {
            isValid = false;
          }
        });
        
        if (isValid) {
          submitInquiryForm(form);
        } else {
          // Mobile-friendly error handling - scroll to first error
          const firstError = form.querySelector('.error');
          if (firstError) {
            firstError.scrollIntoView({ 
              behavior: 'smooth', 
              block: 'center'
            });
            (firstError as HTMLElement).focus();
          }
        }
      });
    });
    
    function validateInquiryField(field) {
      const errorSpan = field.parentNode.querySelector('.cs-error');
      let isValid = true;
      let errorMessage = '';
      
      // Check if field is empty (for required fields)
      if (field.hasAttribute('required') && !field.value.trim()) {
        isValid = false;
        errorMessage = `${getInquiryFieldLabel(field)} is required.`;
      }
      // Email validation
      else if (field.type === 'email' && field.value.trim()) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(field.value.trim())) {
          isValid = false;
          errorMessage = 'Please enter a valid email address.';
        }
      }
      // Location validation - should have city and state
      else if (field.name === 'location' && field.value.trim()) {
        const locationRegex = /^.+,\s*.+$/; // Basic pattern for "City, State"
        if (!locationRegex.test(field.value.trim())) {
          isValid = false;
          errorMessage = 'Please enter location as "City, State" (e.g., Nashville, TN).';
        }
      }
      
      if (!isValid) {
        field.classList.add('error');
        if (errorSpan) {
          errorSpan.textContent = errorMessage;
          errorSpan.classList.add('show');
        }
      } else {
        field.classList.remove('error');
        if (errorSpan) {
          errorSpan.classList.remove('show');
          errorSpan.textContent = '';
        }
      }
      
      return isValid;
    }
    
    function clearInquiryFieldError(field) {
      const errorSpan = field.parentNode.querySelector('.cs-error');
      field.classList.remove('error');
      if (errorSpan) {
        errorSpan.classList.remove('show');
        errorSpan.textContent = '';
      }
    }
    
    function getInquiryFieldLabel(field) {
      const label = field.parentNode.querySelector('.cs-label-text');
      if (label) {
        return label.textContent.replace('*', '').trim();
      }
      return 'This field';
    }
    
    function submitInquiryForm(form) {
      const submitButton = form.querySelector('.cs-button-solid');
      const statusDiv = form.querySelector('.cs-status');
      const buttonText = submitButton.querySelector('span');
      const loading = submitButton.querySelector('.cs-loading');
      
      // Show loading state with mobile-optimized feedback
      submitButton.classList.add('loading');
      submitButton.disabled = true;
      if (loading) loading.style.display = 'block';
      if (buttonText) buttonText.textContent = 'Checking...';
      
      // Hide previous status
      statusDiv.className = 'cs-status';
      statusDiv.textContent = '';
      
      // Simulate form submission (replace with actual submission logic)
      setTimeout(() => {
        // Reset button state
        submitButton.classList.remove('loading');
        submitButton.disabled = false;
        if (loading) loading.style.display = 'none';
        if (buttonText) buttonText.textContent = 'Submit';
        
        // Show success message with mobile-friendly animation
        statusDiv.className = 'cs-status success show';
        statusDiv.textContent = 'Thank you! We\'ve received your inquiry and will check if we serve your area. We\'ll get back to you within 24 hours.';
        
        // Scroll to status message on mobile
        if (window.innerWidth < 768) {
          statusDiv.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center'
          });
        }
        
        // Reset form
        form.reset();
        
        // Clear any remaining error states
        form.querySelectorAll('.error').forEach(el => el.classList.remove('error'));
        form.querySelectorAll('.cs-error.show').forEach(el => {
          el.classList.remove('show');
          el.textContent = '';
        });
        
      }, 1500); // Slightly faster for service area inquiry
    }
  });
</script> 